---
apiVersion: v1
# Kind for volume chain
kind: PersistentVolume
metadata:
  # Name the persistent chain
  name: postgres-persistent-volume
  namespace: skaha-system
  # Labels for identifying PV
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    # PV Storage capacity
    storage: 4Gi
  # A db can write and read from volumes to multiple pods
  accessModes:
    - ReadWriteMany
  # Specify the path to persistent the volumes  
  hostPath:
    path: "/data/postgres"

---

apiVersion: v1
# define a resource for volume chain
kind: PersistentVolumeClaim
metadata:
  # Name the volume chain
  name: postgres-persistent-volume-claim
  namespace: skaha-system
spec:
  storageClassName: manual
  accessModes:
    # Allow ReadWrite to multiple pods
    - ReadWriteMany
  # PVC requesting resources
  resources:
    requests:
      # the PVC storage
      storage: 4Gi

---

apiVersion: v1
# Kind for kubernets ConfigMap
kind: ConfigMap
metadata:
  # Name your ConfigMap
  name: postgres-config
  namespace: skaha-system
  labels:
    app: postgres
data:
  # User DB
  POSTGRES_DB: skaha
  # Db user
  POSTGRES_USER: postgres
  # Db password
  POSTGRES_PASSWORD: postgres

---

apiVersion: v1
# Kind for kubernets ConfigMap
kind: ConfigMap
metadata:
  # Name your ConfigMap
  name: postgres-init-sql
  namespace: skaha-system
  labels:
    app: postgres
data:
  # init sql
  init.sql: |
          SELECT 'CREATE DATABASE skaha'
          WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'skaha')\gexec
          \c skaha;
          CREATE TABLE Users(
              uid      INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
              username VARCHAR(255),
              CONSTRAINT pk_users PRIMARY KEY (uid)
          );
          CREATE TABLE Groups(
              gid       INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
              groupname VARCHAR(255),
              CONSTRAINT pk_groups PRIMARY KEY (gid)
          );
          CREATE TABLE Users_groups(
              Users_uid  INTEGER NOT NULL,
              groups_gid INTEGER NOT NULL
          );
          ALTER TABLE Users_groups ADD CONSTRAINT fk_usegro_on_group FOREIGN KEY (groups_gid) REFERENCES Groups (gid);
          ALTER TABLE Users_groups ADD CONSTRAINT fk_usegro_on_user FOREIGN KEY (Users_uid) REFERENCES Users (uid);
          create sequence users_uid_seq1 start with 100000;
          create sequence groups_gid_seq1 start with 1000000;

---

# Kubernetes API version
apiVersion: apps/v1
# Deployment object
kind: Deployment
metadata:
  # The name of the Deployment
  name: postgres
  namespace: skaha-system
spec:
  # Replicas for this Deployment
  replicas: 1
  selector:
    # labels the pods
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        # The label the pods created from the pod template should have
        app: postgres
    spec:
      containers:
        # The container name to execute pods
        - name: postgres
          # pull postgresimage from docker hub
          image: postgres
          ports:
            # Assign ports to expose container
            - containerPort: 5432
          envFrom:
            # Load the environment variables/PostgresSQL credentials
            - configMapRef:
                # This should be the ConfigMap name created ealier
                name: postgres-config
          volumeMounts:
            # The volume mounts for the container
            - mountPath: /var/lib/postgres/data
              name: postgres-data
            - mountPath: /docker-entrypoint-initdb.d
              name: postgres-init-sql
          resources:
            requests:
              memory: "1000M"
              cpu: "1000m"
            limits:
              memory: "1000M"
              cpu: "1000m"
      # Volumes attached to the pod
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            # reference the PersistentVolumeClaim
            claimName: postgres-persistent-volume-claim
        - name: postgres-init-sql
          configMap:
            name: postgres-init-sql

---

apiVersion: v1
# Kind for service
kind: Service
metadata:
  # Name your service
  name: postgres-client
  namespace: skaha-system
  labels:
    app: postgres
spec:
  # Choose how to expose your service
  type: NodePort
  ports:
    # The port number to expose the service
    - name: postgres-client
      port: 5432
      protocol: TCP
      targetPort: 5432
  # Pod to route service traffic  
  selector:
    app: postgres

---

apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: skaha-system
  labels:
    app: postgres
spec:
  selector:
    app: postgres
  type: ClusterIP
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432

---